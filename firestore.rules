rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Allow public read access to ingredients
    match /ingredients/{ingredientId} {
      allow read: if true;
      allow write: if false; // No one can write directly
    }

    // Allow public read access to products and their reviews
    match /products/{productId} {
      allow read: if true;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.type == 'seller';
      
      match /reviews/{reviewId} {
        allow read: if true;
        allow create: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.type == 'buyer';
      }
    }

    // Secure user data and cart
    match /users/{userId} {
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;

      match /cart/{cartItemId} {
        allow read, write, delete: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Secure orders
    match /orders/{orderId} {
      allow read, update: if request.auth != null && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.type == 'seller' || resource.data.userId == request.auth.uid);
      allow create: if request.auth != null;
    }
    
    // Secure messages
    match /messages/{messageId} {
      allow read, create: if request.auth != null && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.type == 'seller' || resource.data.buyerId == request.auth.uid);
      allow update: if request.auth != null; // To mark as read
    }
  }
}
